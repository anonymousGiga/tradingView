// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © linghuyichong

//@version=5
strategy("5min scalping", overlay=true, pyramiding=1,initial_capital = 10000, default_qty_type= strategy.percent_of_equity, default_qty_value = 100, calc_on_order_fills=false, slippage=0,commission_type=strategy.commission.percent,commission_value=0.03)

// HULL SUITE -----------------------------------------------------------------------------------------
// INPUT
src = input(close, title='Source')
modeSwitch = input.string('Hma', title='Hull Variation', options=['Hma', 'Thma', 'Ehma'])
length = input(55, title='Length(180-200 for floating S/R , 55 for swing entry)')
lengthMult = input(1.0, title='Length multiplier (Used to view higher timeframes with straight band)')

useHtf = input(false, title='Show Hull MA from X timeframe? (good for scalping)')
htf = input.timeframe('240', title='Higher timeframe')

switchColor = input(true, 'Color Hull according to trend?')
candleCol = input(false, title='Color candles based on Hull\'s Trend?')
visualSwitch = input(true, title='Show as a Band?')
thicknesSwitch = input(1, title='Line Thickness')
transpSwitch = input.int(40, title='Band Transparency', step=5)

//FUNCTIONS
//HMA
HMA(_src, _length) =>
    ta.wma(2 * ta.wma(_src, _length / 2) - ta.wma(_src, _length), math.round(math.sqrt(_length)))
//EHMA    
EHMA(_src, _length) =>
    ta.ema(2 * ta.ema(_src, _length / 2) - ta.ema(_src, _length), math.round(math.sqrt(_length)))
//THMA    
THMA(_src, _length) =>
    ta.wma(ta.wma(_src, _length / 3) * 3 - ta.wma(_src, _length / 2) - ta.wma(_src, _length), _length)

//SWITCH
Mode(modeSwitch, src, len) =>
    modeSwitch == 'Hma' ? HMA(src, len) : modeSwitch == 'Ehma' ? EHMA(src, len) : modeSwitch == 'Thma' ? THMA(src, len / 2) : na

//OUT
_hull = Mode(modeSwitch, src, int(length * lengthMult))
HULL = useHtf ? request.security(syminfo.ticker, htf, _hull) : _hull
MHULL = HULL[0]
SHULL = HULL[2]

//COLOR
hullColor = switchColor ? HULL > HULL[2] ? color.green : color.red : color.orange

//condt 
L_HU = MHULL > SHULL and close > open 
S_HU = MHULL < SHULL and open > close 

position = close 

// --------------------------------------------------------------------------------------------------
//PLOT
///< Frame
Fi1 = plot(MHULL, title="MHULL", color=hullColor, linewidth=thicknesSwitch)
Fi2 = plot(visualSwitch ? SHULL : na, title="SHULL", color=hullColor, linewidth=thicknesSwitch)
// alertcondition(crossover(MHULL, SHULL), title="Hull trending up.", message="Hull trending up.")
// alertcondition(crossover(SHULL, MHULL), title="Hull trending down.", message="Hull trending down.")
///< Ending Filler
fill(Fi1, Fi2, title="Band Filler", color=hullColor)
///BARCOLOR
barcolor(color = candleCol ? (switchColor ? hullColor : na) : na)

// MOBO BANDS ----------------------------------------------------------------------------------------
// inputs 
price = input(hl2, 'Price')
colorNormLength = input(3, 'colorNormLength')
dpoLength = input(13, 'dpoLength')
moboDisplace = input(0, 'moboDisplace')
moboLength = input(10, 'moboLength')

numDevDn = input(-0.8, 'numDevDn')
numDevUp = input(0.8, 'numDevUp')

coloredMobo = input(true, 'coloredMobo')
coloredFill = input(true, 'coloredFill')
breakArrows = input(true, 'breakArrows')
moboShowMid = input(true, 'moboShowMid')

//def DPO = price - Average(price[DPO_length / 2 + 1], DPO_length);
xsma = ta.sma(price[dpoLength / 2 + 1], dpoLength)
//xsma = sma(price, dpoLength) 
DPO = price - xsma

Midline = ta.sma(DPO, moboLength)
sDev = ta.stdev(DPO, moboLength)

LowerBand = Midline + numDevDn * sDev
UpperBand = Midline + numDevUp * sDev


Signal1 = DPO > UpperBand and DPO[1] < UpperBand[1]
Signal2 = DPO < LowerBand and DPO[1] > LowerBand[1]

wasUp = 1
wasDn = 1

// condt 
wasUp := Signal1 ? 1 : Signal2 ? 0 : nz(wasUp[1])
wasDn := Signal2 ? 1 : Signal1 ? 0 : nz(wasDn[1])

// -----------------------------------------------------------------------

// tp_long0 = input(0.7, title="  % TP Long", type = input.float, minval = 0, step = 0.1, group="Target Point") 
// tp_short0 = input(0.7, title="  % TP Short", type = input.float, minval = 0, step = 0.1, group="Target Point") 

// tp_long =  tp_long0 / 100
// tp_short = tp_short0 / 100

// enter 
longCondition = wasUp and L_HU
if (longCondition)
    strategy.entry("L", strategy.long)

// shortCondition = wasDn and S_HU
// if (shortCondition)
//     strategy.entry("S", strategy.short)

strategy.exit("TP_L", "L", profit = 0.7, loss = 1)

// strategy.exit("TP_S", "S", profit = 0.7, loss = 1)
